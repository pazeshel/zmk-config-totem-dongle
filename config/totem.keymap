//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3

&mt {
    quick-tap-ms = <100>;
    global-quick-tap;
    flavor = "tap-preferred";
    tapping-term-ms = <185>;
};

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
            layers = <0 1 2>;
        };

        combo_del {
            bindings = <&kp DEL>;
            key-positions = <32 37>;
            layers = <0 1>;
        };

        combo_screenshot {
            bindings = <&kp LG(LS(N4))>;
            key-positions = <9 8>;
        };

        combo_numlock {
            bindings = <&to 1>;
            key-positions = <27 30>;
            layers = <0>;
        };

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <10 19>;
            layers = <0>;
        };

        combo_comma {
            bindings = <&kp COMMA>;
            key-positions = <16 17>;
            layers = <1>;
        };

        combo_dot {
            bindings = <&kp DOT>;
            key-positions = <17 18>;
            layers = <1>;
        };

        combo_multiply {
            bindings = <&kp KP_ASTERISK>;
            key-positions = <18 19>;
            layers = <1>;
        };

        combo_exit_numlock {
            bindings = <&to 0>;
            key-positions = <16 19>;
            layers = <1>;
        };

        combo_delword {
            bindings = <&kp LA(BACKSPACE)>;
            key-positions = <36 32>;
            layers = <0>;
        };
    };

    behaviors {
        smart_shift: smart_shift {
            compatible = "zmk,behavior-mod-morph";
            label = "SMART_SHIFT";
            bindings = <&sk LSHFT>, <&caps_word>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        hml: hml {
            compatible = "zmk,behavior-hold-tap";
            label = "HML";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <185>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 6 7 8 9 31 19 18 17 16 15 26 27 28 29 30 32 33 34 35 36 37>;
        };

        hmr: hmr {
            compatible = "zmk,behavior-hold-tap";
            label = "HMR";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 25 32 33 34 35 36 37>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        // ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

        base_layer {
            // ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓

            label = "BASE";

            // ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
            //             ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓   ┏━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┳━━━━━━━━━━━┓
            //             ┃     Q     ┃     W     ┃     E     ┃     R     ┃     T     ┃   ┃     Y     ┃     U     ┃     I     ┃     O     ┃     P     ┃
            //             ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫
            //             ┃     A     ┃     S     ┃     D     ┃     F     ┃     G     ┃   ┃     H     ┃     J     ┃     K     ┃     L     ┃     ;     ┃
            // ┏━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┓
            // ┃     Q     ┃     Z     ┃     X     ┃     C     ┃     V     ┃     B     ┃   ┃     N     ┃     M     ┃     ,     ┃     .     ┃     /     ┃     \     ┃
            // ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┫   ┣━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━╋━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛
            //                                     ┃    DEL    ┃    TAB    ┃    SPC    ┃   ┃   ENTER   ┃           ┃   BSPC    ┃
            //                                     ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛   ┗━━━━━━━━━━━┻━━━━━━━━━━━┻━━━━━━━━━━━┛

            bindings = <
           &kp Q              &kp W                &kp F                               &kp P            &kp B           &kp J    &kp L             &kp U                               &kp Y                 &kp SEMI
           &hml LEFT_SHIFT A  &hml LEFT_CONTROL R  &hml LEFT_ALT S                     &hml LEFT_GUI T  &kp G           &kp M    &hmr RIGHT_GUI N  &hmr RIGHT_ALT E                    &hmr RIGHT_CONTROL I  &hmr RIGHT_SHIFT O
&lt 3 TAB  &kp Z              &kp X                &kp C                               &kp D            &kp V           &kp K    &kp H             &kp COMMA                           &kp DOT               &kp FSLH            &kp SQT
                                                   &mt LS(LA(LC(LEFT_GUI))) BACKSPACE  &lt 1 SPACE      &smart_shift    &kp RET  &lt 2 SPACE       &mt LS(LA(LEFT_CONTROL)) BACKSPACE
            >;
        };

        num_sym_layer {
            bindings = <
        &kp LG(Q)  &kp LG(W)  &kp LG(F)  &kp LG(P)  &kp GRAVE    &kp BACKSLASH                           &kp NUMBER_7  &kp N8         &kp NUMBER_9  &kp MINUS
        &kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &trans       &mt RIGHT_PARENTHESIS LEFT_PARENTHESIS  &kp NUMBER_4  &kp NUMBER_5   &kp NUMBER_6  &mt RIGHT_SHIFT PLUS
&trans  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &trans     &kp LG(V)    &mt RIGHT_BRACKET LEFT_BRACKET          &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp SLASH             &kp EQUAL
                              &trans     &trans     &trans       &trans                                  &kp NUMBER_0  &kp BACKSPACE
            >;
        };

        nav_layer {
            bindings = <
        &trans     &trans     &trans             &trans    &trans    &kp HOME  &kp LC(LS(TAB))  &kp UP         &kp LC(TAB)   &kp LG(GRAVE)
        &kp LSHFT  &kp LCTRL  &kp LALT           &kp LGUI  &trans    &kp END   &kp LEFT         &kp DOWN       &kp RIGHT     &kp LG(BACKSLASH)
&trans  &trans     &trans     &trans             &trans    &trans    &trans    &kp PAGE_UP      &kp PAGE_DOWN  &kp LG(LEFT)  &kp LG(RIGHT)      &trans
                              &kp LA(BACKSPACE)  &trans    &trans    &trans    &trans           &trans
            >;
        };

        sys_layer {
            bindings = <
        &bt BT_CLR  &sys_reset    &out OUT_TOG  &kp C_VOLUME_UP   &kp C_BRIGHTNESS_INC    &trans  &kp F7  &kp F8  &kp F9  &kp F12
        &bt BT_NXT  &kp C_REWIND  &kp C_NEXT    &kp C_PLAY_PAUSE  &kp C_MUTE              &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &bt BT_PRV  &trans        &trans        &kp C_VOL_DN      &kp C_BRIGHTNESS_DEC    &trans  &kp F1  &kp F2  &kp F3  &kp F10  &trans
                                  &trans        &trans            &kp ENTER               &trans  &trans  &trans
            >;
        };
    };
};
